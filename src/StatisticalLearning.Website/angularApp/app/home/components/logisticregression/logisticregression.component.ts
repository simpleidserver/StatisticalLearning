import { Component, Inject, OnInit } from '@angular/core';
import { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';
import * as fromAppState from '@app/stores/appstate';
import * as fromStatisticActions from '@app/stores/statistic/statistic-actions';
import { select, Store } from '@ngrx/store';
import { CoefficientResult } from '../../../stores/statistic/models/coefficient.result';
import { LogisticRegressionResult } from '../../../stores/statistic/models/logistic-regression.result';
var Plotly = require('plotly.js-dist');

@Component({
    selector: 'logisticregression-component',
    templateUrl: './logisticregression.component.html',
    styleUrls: ['./logisticregression.component.scss']
})
export class LogisticRegressionComponent implements OnInit {
    logisticRegressionResult: LogisticRegressionResult;
    inputs: number[][] =
        [
            [380],
            [660],
            [800],
            [640],
            [520],
            [760],
            [560],
            [400],
            [540],
            [700],
            [800],
            [440],
            [760],
            [700],
            [700],
            [480],
            [780],
            [360],
            [800],
            [540],
            [500],
            [660],
            [600],
            [680],
            [760],
            [800],
            [620],
            [520],
            [780],
            [520],
            [540],
            [760],
            [600],
            [800],
            [360],
            [400],
            [580],
            [520],
            [500],
            [520],
            [560],
            [580],
            [600],
            [500],
            [700],
            [460],
            [580],
            [500],
            [440],
            [400],
            [640],
            [440],
            [740],
            [680],
            [660],
            [740],
            [560],
            [380],
            [400],
            [600],
            [620],
            [560],
            [640],
            [680],
            [580],
            [600],
            [740],
            [620],
            [580],
            [800],
            [640],
            [300],
            [480],
            [580],
            [720],
            [720],
            [560],
            [800],
            [540],
            [620],
            [700],
            [620],
            [500],
            [380],
            [500],
            [520],
            [600],
            [600],
            [700],
            [660],
            [700],
            [720],
            [800],
            [580],
            [660],
            [660],
            [640],
            [480],
            [700],
            [400],
            [340],
            [580],
            [380],
            [540],
            [660],
            [740],
            [700],
            [480],
            [400],
            [480],
            [680],
            [420],
            [360],
            [600],
            [720],
            [620],
            [440],
            [700],
            [800],
            [340],
            [520],
            [480],
            [520],
            [500],
            [720],
            [540],
            [600],
            [740],
            [540],
            [460],
            [620],
            [640],
            [580],
            [500],
            [560],
            [500],
            [560],
            [700],
            [620],
            [600],
            [640],
            [700],
            [620],
            [580],
            [580],
            [380],
            [480],
            [560],
            [480],
            [740],
            [800],
            [400],
            [640],
            [580],
            [620],
            [580],
            [560],
            [480],
            [660],
            [700],
            [600],
            [640],
            [700],
            [520],
            [580],
            [700],
            [440],
            [720],
            [500],
            [600],
            [400],
            [540],
            [680],
            [800],
            [500],
            [620],
            [520],
            [620],
            [620],
            [300],
            [620],
            [500],
            [700],
            [540],
            [500],
            [800],
            [560],
            [580],
            [560],
            [500],
            [640],
            [800],
            [640],
            [380],
            [600],
            [560],
            [660],
            [400],
            [600],
            [580],
            [800],
            [580],
            [700],
            [420],
            [600],
            [780],
            [740],
            [640],
            [540],
            [580],
            [740],
            [580],
            [460],
            [640],
            [600],
            [660],
            [340],
            [460],
            [460],
            [560],
            [540],
            [680],
            [480],
            [800],
            [800],
            [720],
            [620],
            [540],
            [480],
            [720],
            [580],
            [600],
            [380],
            [420],
            [800],
            [620],
            [660],
            [480],
            [500],
            [700],
            [440],
            [520],
            [680],
            [620],
            [540],
            [800],
            [680],
            [440],
            [680],
            [640],
            [660],
            [620],
            [520],
            [540],
            [740],
            [640],
            [520],
            [620],
            [520],
            [640],
            [680],
            [440],
            [520],
            [620],
            [520],
            [380],
            [560],
            [600],
            [680],
            [500],
            [640],
            [540],
            [680],
            [660],
            [520],
            [600],
            [460],
            [580],
            [680],
            [660],
            [660],
            [360],
            [660],
            [520],
            [440],
            [600],
            [800],
            [660],
            [800],
            [420],
            [620],
            [800],
            [680],
            [800],
            [480],
            [520],
            [560],
            [460],
            [540],
            [720],
            [640],
            [660],
            [400],
            [680],
            [220],
            [580],
            [540],
            [580],
            [540],
            [440],
            [560],
            [660],
            [660],
            [520],
            [540],
            [300],
            [340],
            [780],
            [480],
            [540],
            [460],
            [460],
            [500],
            [420],
            [520],
            [680],
            [680],
            [560],
            [580],
            [500],
            [740],
            [660],
            [420],
            [560],
            [460],
            [620],
            [520],
            [620],
            [540],
            [660],
            [500],
            [560],
            [500],
            [580],
            [520],
            [500],
            [600],
            [580],
            [400],
            [620],
            [780],
            [620],
            [580],
            [700],
            [540],
            [760],
            [700],
            [720],
            [560],
            [720],
            [520],
            [540],
            [680],
            [460],
            [560],
            [480],
            [460],
            [620],
            [580],
            [800],
            [540],
            [680],
            [680],
            [620],
            [560],
            [560],
            [620],
            [800],
            [640],
            [540],
            [700],
            [540],
            [540],
            [660],
            [480],
            [420],
            [740],
            [580],
            [640],
            [640],
            [800],
            [660],
            [600],
            [620],
            [460],
            [620],
            [560],
            [460],
            [700],
            [600]
        ];
    outputs: number[] =
        [
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0
        ];

    constructor(private store: Store<fromAppState.AppState>, private dialog: MatDialog) { }

    ngOnInit(): void {
        this.store.pipe(select(fromAppState.selectLogisticRegressionResult)).subscribe((logisticRegressionResult: LogisticRegressionResult) => {
            if (!logisticRegressionResult) {
                return;
            }

            const scatterTrace: any =
            {
                x: [],
                y: [],
                mode: 'markers',
                type: 'scatter'
            };
            const lineTrace: any = {
                x: [],
                y: [],
                mode: 'lines',
                type: 'scatter'
            };
            this.logisticRegressionResult = logisticRegressionResult;
            for (let i = 0; i < this.inputs.length; i++) {
                const observation: number[] = this.inputs[i];
                scatterTrace.x.push(observation[0]);
                scatterTrace.y.push(this.outputs[i]);
            }

            const column = this.getColumn(this.inputs, 0);
            const min = this.min(column);
            const max = this.max(column);
            const intercept: number = logisticRegressionResult.regression.intercept.value;
            const nb = max - min;
            const nextX = (max - min) / nb;
            for (let x = min; x < max; x += nextX) {
                let y: number = intercept;
                y += x * logisticRegressionResult.regression.slope[0].value;
                y = 1.0 / (1.0 + Math.exp(-y));
                lineTrace.x.push(x);
                lineTrace.y.push(y);
            }

            Plotly.newPlot('logisticRegression', [scatterTrace, lineTrace]);
        });
        this.refresh();
    }

    displayInfo() {
        this.dialog.open(LogisticRegressionDialog, {
            width: '800px',
            data: this.logisticRegressionResult
        });
    } 

    refresh() {
        this.store.dispatch(new fromStatisticActions.ComputeLogisticRegression(this.inputs, this.outputs));
    }

    getColumn(input: number[][], index: number) {
        let result: number[] = [];
        for (let i = 0; i < input.length; i++) {
            result.push(input[i][index]);
        }

        return result;
    }

    max(input: number[]) {
        let result: any = null;
        input.forEach(function (r: number) {
            if (result == null) {
                result = r;
            }
            else if (result < r) {
                result = r;
            }
        });

        return result;
    }

    min(input: number[]) {
        let result: any = null;
        input.forEach(function (r: number) {
            if (result == null) {
                result = r;
            }
            else if (result > r) {
                result = r;
            }
        });

        return result;
    }
}

class CoefficientResultView extends CoefficientResult {
    name: string;
}

@Component({
    selector: 'logisticregression-dialog',
    templateUrl: 'logisticregression-dialog.component.html',
})
export class LogisticRegressionDialog {
    displayedColumns: string[] = ["name", "standardError", "tStatistic", "pValue"];
    coefficients: CoefficientResultView[] = [];
    constructor(public dialogRef: MatDialogRef<LogisticRegressionDialog>, @Inject(MAT_DIALOG_DATA) public data: LogisticRegressionResult) {
        const self = this;
        let i = 0;
        self.coefficients.push(self.convert(data.regression.intercept, "Intercept"));
        data.regression.slope.forEach(function (coef: CoefficientResult) {
            self.coefficients.push(self.convert(coef, "X" + i));
            i++;
        });
    }

    close() {
        this.dialogRef.close();
    }

    get equation() {
        let result = this.data.regression.intercept.value.toString();
        let i = 0;
        this.data.regression.slope.forEach(function (s: CoefficientResult) {
            result += " + " + s.value + "*X" + i;
            i++;
        });

        return "logistic(" + result + ")";
    }

    private convert(coef: CoefficientResult, name: string): CoefficientResultView {
        const result = new CoefficientResultView();
        result.name = name;
        result.pValue = coef.pValue;
        result.standardError = coef.standardError;
        result.tStatistic = coef.tStatistic;
        result.value = coef.value;
        return result;
    }
}